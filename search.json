[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Source Code",
    "section": "",
    "text": "source\n\n\n\n generate_json_schema (func:Callable)\n\n*Generate a JSON schema for the given function based on its annotations and docstring.\nArgs: func (Callable): The function to generate a schema for.\nReturns: Dict[str, Any]: A JSON schema for the function.*\n\nsource\n\n\n\n\n json_schema_decorator (func:~T)\n\n*Decorator to generate and attach a JSON schema to a function.\nArgs: func (Callable): The function to decorate.\nReturns: Callable: The decorated function with an attached JSON schema.*",
    "crumbs": [
      "Source Code"
    ]
  },
  {
    "objectID": "core.html#helper-functions",
    "href": "core.html#helper-functions",
    "title": "Source Code",
    "section": "",
    "text": "source\n\n\n\n generate_json_schema (func:Callable)\n\n*Generate a JSON schema for the given function based on its annotations and docstring.\nArgs: func (Callable): The function to generate a schema for.\nReturns: Dict[str, Any]: A JSON schema for the function.*\n\nsource\n\n\n\n\n json_schema_decorator (func:~T)\n\n*Decorator to generate and attach a JSON schema to a function.\nArgs: func (Callable): The function to decorate.\nReturns: Callable: The decorated function with an attached JSON schema.*",
    "crumbs": [
      "Source Code"
    ]
  },
  {
    "objectID": "core.html#local-file-processing-listing-content-extraction-and-summarization",
    "href": "core.html#local-file-processing-listing-content-extraction-and-summarization",
    "title": "Source Code",
    "section": "Local file processing: listing, content extraction, and summarization",
    "text": "Local file processing: listing, content extraction, and summarization\n\nsource\n\nget_file_names\n\n get_file_names (ext:str='pdf, txt')\n\n*Retrieves a list of file names with specified extensions in a local data directory the assistant has access to on the user’s computer.\nArgs: ext: A comma-separated string of file extensions to filter the files by. Options are: pdf, txt, md, markdown, csv, and py. Defaults to “pdf, txt”.\nReturns: str: A comma-separated string of file names with the specified extensions. If no files are found, a message is returned.\nExample: &gt;&gt;&gt; get_file_names(ext=“pdf, txt”)\n\"List of file names with the specified extensions in the local data directory: file1.pdf, file2.txt\"*\n\nsource\n\n\nextract_text_from_pdf\n\n extract_text_from_pdf (file_name:str, page_range:Optional[str]=None)\n\n*A function that extracts text from a PDF file. Use this tool to extract specific details from a PDF document, such as abstract, authors, conclusions, or user-specified content of other sections. If the user specifies a page rage, use the optional page_range parameter to extract text from specific pages. If the user uses words such as beginning, middle, or end, to descripe the section, infer the page range based on the total number of 15 pages in a document. Do not use this tool to summarize an entire PDF document. Only use this tool for documents with extensions .pdf, or .PDF.\nArgs: file_name (str): The file name of the PDF document in the local data directory. page_range (Optional[str]): A string with page numbers and/or page ranges separated by commas (e.g., “1” or “1, 2”, or “5-7”). Default is None to extract all pages.\nReturns: str: Extracted text from the PDF.\nExample: &gt;&gt;&gt; text = extract_text_from_pdf(“./test.pdf”, page_range=“1”)*\n\nsource\n\n\nextract_title_and_first_author\n\n extract_title_and_first_author (contents:List[Dict[str,str]],\n                                 model:str='llama3.1',\n                                 verbose:Optional[bool]=False,\n                                 show_progress:Optional[bool]=False)\n\n*A function that extracts the titles and the first author’s names from the text of one or more research articles.\nArgs: contents (List[Dict[str, str]]): A list of dictionaries containing the file name and extracted text. model (str): The model to use for the extraction. Default is ‘llama3.1’. verbose (Optional[bool]): Whether to print additional information. Default is False. show_progress (Optional[bool]): Whether to show a progress bar. Default is False.\nReturns: contents (List[Dict[str, str]]): The input list of dictionaries with the extracted title and first author added.\nRaises: JSONDecodeError: If the JSON response is invalid.\nExample: &gt;&gt;&gt; contents = extract_title_and_first_author(contents) Extracting titles and first authors: 100%|██████████| 3/3 [00:22&lt;00:00, 7.35s/it]*\n\nsource\n\n\nget_titles_and_first_authors\n\n get_titles_and_first_authors ()\n\n*A function that retrieves the titles of research articles from a directory of PDF files.\nReturns: str: A JSON-formatted string containing the titles, first authors and file names of the research articles.\nRaises: FileNotFoundError: If the specified directory does not exist.\nExample: &gt;&gt;&gt; get_titles_and_first_authors()*\n\nsource\n\n\nsummarize_local_document\n\n summarize_local_document (file_name:str, ext:str='pdf')\n\n*Summarize the content of a single PDF, markdown, or text document from the local data directory.\nArgs: file_name (str): The file name of the local document to summarize. ext (str): The extension of the local document. Options are: pdf, txt, md, and markdown. Defaults to “pdf”.\nReturns: str: The summary of the content of the local document.\nExample: &gt;&gt;&gt; summarize_local_document(“research_paper”, ext=“pdf”)*\n\nsource\n\n\ndescribe_python_code\n\n describe_python_code (file_name:str)\n\n*Describe the purpose of the Python code in a local Python file. This may involve summarizing the entire code, extracting key functions, or providing an overview of the code structure.\nArgs: file_name (str): The file name of the local Python code file document to describe.\nReturns: str: A description of the purpose of the Python code in the local file.\nExample: &gt;&gt;&gt; describe_python_code(“main.py”, ext=“py”)*",
    "crumbs": [
      "Source Code"
    ]
  },
  {
    "objectID": "core.html#external-data-retrieval-from-ncbi-openalex-and-semantic-scholar",
    "href": "core.html#external-data-retrieval-from-ncbi-openalex-and-semantic-scholar",
    "title": "Source Code",
    "section": "External data retrieval from NCBI, OpenAlex and Semantic Scholar",
    "text": "External data retrieval from NCBI, OpenAlex and Semantic Scholar\n\nsource\n\nid_converter_tool\n\n id_converter_tool (ids:List[str])\n\n*For any article(s) in PubMed Central, find all the corresponding PubMed IDs (PMIDs), digital object identifiers (DOIs), and manuscript IDs (MIDs). Use this tool to convert a list of IDs, such as PMIDs, PMCIDs, or DOIs, and find the corresponding IDs for the same articles.\nArgs: ids (str): A string with a comma-separated list of IDs to convert. Must be PMIDs, PMCIDs, or DOIs. The maximum number of IDs per request is 200.\nReturns: str: A JSON-formatted string containing the conversion results and the detected ID types.*\n\nsource\n\n\ndetect_id_type\n\n detect_id_type (id_string:str)\n\n*Detect the type of the given ID or title.\nArgs: id_string (str): The ID or title to detect.\nReturns: str: The detected type (‘pmid’, ‘pmcid’, ‘doi’, ‘openalex’, ‘semantic_scholar’, ‘potential_title’, or ‘unknown’).*\n\nsource\n\n\nconvert_id\n\n convert_id (ids:List[str])\n\n*For any article(s) in PubMed Central, find all the corresponding PubMed IDs (PMIDs), digital object identifiers (DOIs), and manuscript IDs (MIDs).\nArgs: ids (List[str]): A list of IDs to convert (max 200 per request).\nReturns: Str: A JSON-formatted string containing the conversion results.*\n\nsource\n\n\nquery_openalex_api\n\n query_openalex_api (query_param:str)\n\n*Retrieve metadata for a given article from OpenAlex, a comprehensive open-access catalog of global research papers. Use this tool to search the OpenAlex API by using the article title, the PubMed ID (PMID), the PubMed Central ID (PMCID) or the digital object identifier (DOI) of an article as the query parameter. This tool returns the following metadata: - the OpenAlex ID - the digital object identifier (DOI) URL - Citation count - The open access status - URL to the open-access location for the work - Publication year - A URL to a website listing works that have cite the article - The type of the article Use this tool only if an article title, PubMed ID or DOI is provided by the user or was extracted from a local PDF file and is present in the conversation history.\nArgs: query_param (str): The article title, the PubMed ID (PMID), the PubMed Central ID (PMCID) or the digital object identifier (DOI) of the article to retrieve metadata for. May be provided by the user or extracted from a local PDF file and present in the conversation history.\nReturns: str: A JSON-formatted string including the search results from the OpenAlex database. If no results are found or the API query fails, an appropriate message is returned.*\n\nsource\n\n\nquery_semantic_scholar_api\n\n query_semantic_scholar_api (query_param:str)\n\n*Retrieve metadata for a given article from the Semantic Scholar Academic Graph (S2AG), a large knowledge graph of scientific literature that combines data from multiple sources. Use this tool to query the Semantic Scholar Graph API by using either the article title, the PubMed ID, or the digital object identifier (DOI) to retrieve the following metadata: - the title - the publication year - the abstract - a tldr (too long, didn’t read) summary - the authors of the article - the URL to the open-access PDF version of the article, if available - the journal name - a url to the article on the Semantic Scholar website Use this tool only if an article title, PubMed ID or DOI is provided by the user or was extracted from a local PDF file and is present in the conversation history.\nArgs: query_param (str): The article title, the PubMed ID, or the digital object identifier of the article to retrieve metadata for. May be provided by the user or extracted from a local PDF file and present in the conversation history. Do not include the ‘https://doi.org/’ prefix for DOIs, or keys such as ‘DOI’, ‘PMCID’ or ‘PMID’. The tool will automatically detect the type of identifier provided.\nReturns: str: A JSON-formatted string including the search results from the Semantic Scholar database. If no results are found or the API query fails, an appropriate message is returned.*\n\nsource\n\n\nrespond_to_generic_queries\n\n respond_to_generic_queries ()\n\n*A function to respond to generic questions or queries from the user. Use this tool if no better tool is available.\nThis tool does not take any arguments.\nReturns: str: A response to a generic question.*",
    "crumbs": [
      "Source Code"
    ]
  },
  {
    "objectID": "core.html#assistant-class",
    "href": "core.html#assistant-class",
    "title": "Source Code",
    "section": "Assistant class",
    "text": "Assistant class\n\nsource\n\nshow_response\n\n show_response (response:Dict[str,Any])\n\n*Print the response from the LLM in a human-readable format.\nArgs: response (Dict[str, Any] or Generator[Dict[str, Any], None, None]): The response from the LLM.*\n\nsource\n\n\nAssistant\n\n Assistant (status:dict={}, sys_message:str=None,\n            model:str='llama3.1:latest',\n            tools:Dict[str,Any]={'get_file_names': &lt;function\n            get_file_names at 0x7f28b807dbd0&gt;, 'extract_text_from_pdf':\n            &lt;function extract_text_from_pdf at 0x7f28b8c796c0&gt;,\n            'get_titles_and_first_authors': &lt;function\n            get_titles_and_first_authors at 0x7f28b7ef15a0&gt;,\n            'summarize_local_document': &lt;function summarize_local_document\n            at 0x7f28b7ef2050&gt;, 'describe_python_code': &lt;function\n            describe_python_code at 0x7f28b7ef2560&gt;, 'id_converter_tool':\n            &lt;function id_converter_tool at 0x7f28b7ef2e60&gt;,\n            'query_openalex_api': &lt;function query_openalex_api at\n            0x7f28b7ef2ef0&gt;, 'query_semantic_scholar_api': &lt;function\n            query_semantic_scholar_api at 0x7f28b7ef35b0&gt;,\n            'respond_to_generic_queries': &lt;function\n            respond_to_generic_queries at 0x7f28b7ef3880&gt;},\n            add_tools:Dict[str,Any]={},\n            authentication:Optional[Dict[str,str]]=None,\n            dir_path:str='../data', messages:List[Dict[str,str]]=[])\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstatus\ndict\n{}\nThe status of the assistant\n\n\nsys_message\nstr\nNone\nThe system message for the assistant; if not provided, a default message is used\n\n\nmodel\nstr\nllama3.1:latest\nThe model to use for the assistant\n\n\ntools\nDict\n{‘get_file_names’: &lt;function get_file_names at 0x7f28b807dbd0&gt;, ‘extract_text_from_pdf’: &lt;function extract_text_from_pdf at 0x7f28b8c796c0&gt;, ‘get_titles_and_first_authors’: &lt;function get_titles_and_first_authors at 0x7f28b7ef15a0&gt;, ‘summarize_local_document’: &lt;function summarize_local_document at 0x7f28b7ef2050&gt;, ‘describe_python_code’: &lt;function describe_python_code at 0x7f28b7ef2560&gt;, ‘id_converter_tool’: &lt;function id_converter_tool at 0x7f28b7ef2e60&gt;, ‘query_openalex_api’: &lt;function query_openalex_api at 0x7f28b7ef2ef0&gt;, ‘query_semantic_scholar_api’: &lt;function query_semantic_scholar_api at 0x7f28b7ef35b0&gt;, ‘respond_to_generic_queries’: &lt;function respond_to_generic_queries at 0x7f28b7ef3880&gt;}\nThe tools available to the assistant\n\n\nadd_tools\nDict\n{}\nOptional argument to add additional tools to the assistant, when initializing\n\n\nauthentication\nOptional\nNone\nAuthentication credentials for API calls to external services\n\n\ndir_path\nstr\n../data\nThe directory path to which the assistant has access on the local computer\n\n\nmessages\nList\n[]\nThe conversation history\n\n\n\n\nassistant = Assistant()\n\nLoaded Semantic Scholar API key from the environment variables.\nLoaded email address from the environment variables.\nA local directory /Users/user2/GitHub/scholaris-minimal-reproduction-1/data already exists for storing data files. No of files: 0\n\n\n\n\nsource\n\n\nadd_to_class\n\n add_to_class (Class:type)\n\nRegister functions as methods in a class that has already been defined.\n\nsource\n\n\nshow_doc\n\n show_doc (sym, renderer=None, name:str|None=None, title_level:int=3)\n\nShow signature and docstring for sym\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsym\n\n\nSymbol to document\n\n\nrenderer\nNoneType\nNone\nOptional renderer (defaults to markdown)\n\n\nname\nstr | None\nNone\nOptionally override displayed name of sym\n\n\ntitle_level\nint\n3\nHeading level to use for symbol name\n\n\n\n\nsource\n\n\nshow_doc\n\n show_doc (sym, renderer=None, name:str|None=None, title_level:int=3)\n\nShow signature and docstring for sym\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsym\n\n\nSymbol to document\n\n\nrenderer\nNoneType\nNone\nOptional renderer (defaults to markdown)\n\n\nname\nstr | None\nNone\nOptionally override displayed name of sym\n\n\ntitle_level\nint\n3\nHeading level to use for symbol name\n\n\n\n\nsource\n\n\nshow_doc\n\n show_doc (sym, renderer=None, name:str|None=None, title_level:int=3)\n\nShow signature and docstring for sym\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsym\n\n\nSymbol to document\n\n\nrenderer\nNoneType\nNone\nOptional renderer (defaults to markdown)\n\n\nname\nstr | None\nNone\nOptionally override displayed name of sym\n\n\ntitle_level\nint\n3\nHeading level to use for symbol name",
    "crumbs": [
      "Source Code"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "scholaris-minimal-reproduction-1",
    "section": "",
    "text": "assistant = Assistant()",
    "crumbs": [
      "scholaris-minimal-reproduction-1"
    ]
  }
]